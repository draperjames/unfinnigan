#!/usr/bin/env perl

use strict;
use warnings FATAL => qw( all );
use feature qw/state say/;
use 5.010;

use Getopt::Declare;
use Finnigan;


@ARGV == 1 or do {
  say STDERR "Usage: $0 <file>";
  exit -1;
};
my $file = $ARGV[0];
-e $file or do {
  say STDERR "file '$file' does not exist";
  exit -1;
};
-f $file or do {
  say STDERR "'$file' is not a plain file";
  exit -1;
};
-s $file or do {
  say STDERR "'$file' has zero size";
  exit -1;
};

# -----------------------------------------------------------------------------
open INPUT, "<$file" or die "can't open '$file': $!";
binmode INPUT;

my $header = Finnigan::FileHeader->decode(\*INPUT);
my $VERSION = $header->version;
my $seq_row = Finnigan::SeqRow->decode(\*INPUT, $VERSION);
my $cas_info = Finnigan::ASInfo->decode(\*INPUT);
my $rfi = Finnigan::RawFileInfo->decode(\*INPUT, $VERSION);


my $run_header_0_addr = $rfi->preamble->run_header_addr(0);
my $run_header_1_addr;
if ( $rfi->preamble->run_header_addr(0) ) {
  # There is more than one data stream; see which of the run headers to use
  $run_header_1_addr = $rfi->preamble->run_header_addr(1);
}

# fast-forward to RunHeader
seek INPUT, $run_header_0_addr, 0;
my $run_header_0 = Finnigan::RunHeader->decode(\*INPUT, $VERSION);
my $run_header = $run_header_0;
my $inst_id  = Finnigan::InstID->decode( \*INPUT );

my $run_header_1;
if ($run_header_1_addr) {
  seek INPUT, $run_header_1_addr, 0;
  $run_header_1 = Finnigan::RunHeader->decode(\*INPUT, $VERSION);

  if ( $run_header_0->ntrailer and $run_header_1->ntrailer ) {
    die "Don't know which RunHeader to choose. Both have non-zero number of scan events: " . $run_header_0->ntrailer . " and " . $run_header_1->ntrailer;
  }

  if ( $run_header_0->ntrailer == 0 and $run_header_1->ntrailer == 0) {
    die "Don't know where to look for scan data. There are two RunHeader objects, both indicating a zero number of scan events";
  }

  if ( $run_header_0->ntrailer == 0 and $run_header_1->ntrailer ) {
    $run_header = $run_header_1;
  }
  if ( $run_header_0->ntrailer and $run_header_1->ntrailer == 0) {
    $run_header = $run_header_0;
  }
}

# Skip to the error log and read through
seek INPUT, $run_header->error_log_addr, 0;

# In all known samples before v.66, the error log length was written here (as well as in SampleInfo)
my $error_log_length = Finnigan::Decoder->read(\*INPUT, ['length' => ['V', 'UInt32']])->{data}->{length}->{value};

# In v.66, it is always set to 0, even when there are error messages. The value in SampleInfo seems to be more reliable.
$error_log_length = $run_header->sample_info->error_log_length unless $error_log_length;

foreach my $i ( 0 .. $error_log_length - 1) {
  Finnigan::Error->decode(\*INPUT);
}

# read through the scan event hierarchy
my $nsegs = Finnigan::Decoder->read(\*INPUT, ['nsegs' => ['V', 'UInt32']])->{data}->{nsegs}->{value};
foreach my $i ( 0 .. $nsegs - 1) {
  my $n = Finnigan::Decoder->read(\*INPUT, ['n' => ['V', 'UInt32']])->{data}->{n}->{value};
  foreach my $j ( 0 .. $n - 1) {
    my $e = Finnigan::ScanEventTemplate->decode(\*INPUT, $header->version, $inst_id->model);
    say "($i, $j)";
    $e->dump();
    say join " ", $e->preamble->list('decode');
    say "--------";
  }
}

__END__
=head1 NAME

uf-segments - dump the scan event hirerarchy of a Finnigan raw file

=head1 SYNOPSIS

uf-segments <file>

=head1 OPTIONS

=over 4

None

=back

=head1 DESCRIPTION

This is a very rough-and-ready means to examine the scan hierarchy in
a Finnigan raw file. All ScanEventTemplate structures are dumped to
STDIN, prepended with their segment and scan event numbers.

=head1 SEE ALSO

Finnigan::ScanEventTemplate

=cut

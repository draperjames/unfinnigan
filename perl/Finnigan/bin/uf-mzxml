#!/usr/bin/env perl

use strict;
use warnings FATAL => qw( all );
use feature qw/state say/;
use 5.010;

use Data::Dumper qw(Dumper);
use Data::UUID;
use Digest::SHA1;
use File::Basename qw(basename);
use Finnigan;
use Getopt::Declare;
use Cwd;
use MIME::Base64;
use Tie::IxHash;
use XML::Generator;

my $NBINS = 4;

my %indent_table = (
  2 => 1,
  2 => 1,
  4 => 2,
  6 => 1,
  8 => 2,
  9 => 2,
 11 => 3,
 17 => 3,
);

my $args = new Getopt::Declare q{
  [strict]
  -c[entroids]				prefer peak centroids to scan profiles, if available
  -r[ange] <from:0+n> .. <to:0+n>	write only scans with numbers between <from> and <to>
  -q[uiet]				suppress instrument error messages
  <file>				input file [required]
}
  or exit(-1);

my $file = $args->{"<file>"};
my $path = Cwd::getcwd;
-e $file or die "file '$file' does not exist";
-f $file or die "'$file' is not a plain file";
-s $file or die "'$file' has zero size";

my $basename = basename($file, qw/.raw .RAW/);

# -----------------------------------------------------------------------------

open INPUT, "<$file" or die "can't open '$file': $!";
binmode INPUT;

my $sha1 = new Digest::SHA1;
$sha1->addfile(\*INPUT);
my $digest = $sha1->hexdigest;
seek INPUT, 0, 0; # rewind

# reset the digest generator to work with our output
$sha1 = new Digest::SHA1;

my $header = Finnigan::FileHeader->decode(\*INPUT);
my $VERSION = $header->version;
my $seq_row = Finnigan::SeqRow->decode(\*INPUT, $VERSION);
my $cas_info = Finnigan::ASInfo->decode(\*INPUT);
my $rfi = Finnigan::RawFileInfo->decode(\*INPUT, $VERSION);

# my $method_file = Finnigan::MethodFile->decode(\*INPUT, $VERSION);
# my %translate = @{$method_file->translation_table};

my $run_header_0_addr = $rfi->preamble->run_header_addr(0);
my $run_header_1_addr;
if ( $rfi->preamble->run_header_addr(0) ) {
  # There is more than one data stream; see which of the run headers to use
  $run_header_1_addr = $rfi->preamble->run_header_addr(1);
}

# fast-forward to RunHeader
seek INPUT, $run_header_0_addr, 0;
my $run_header_0 = Finnigan::RunHeader->decode(\*INPUT, $VERSION);
my $run_header = $run_header_0;

my $run_header_1;
if ($run_header_1_addr) {
  seek INPUT, $run_header_1_addr, 0;
  $run_header_1 = Finnigan::RunHeader->decode(\*INPUT, $VERSION);

  if ( $run_header_0->ntrailer and $run_header_1->ntrailer ) {
    die "Don't know which RunHeader to choose. Both have non-zero number of scan events: " . $run_header_0->ntrailer . " and " . $run_header_1->ntrailer;
  }

  if ( $run_header_0->ntrailer == 0 and $run_header_1->ntrailer == 0) {
    die "Don't know where to look for scan data. There are two RunHeader objects, both indicating a zero number of scan events";
  }

  if ( $run_header_0->ntrailer == 0 and $run_header_1->ntrailer ) {
    $run_header = $run_header_1;
  }
  if ( $run_header_0->ntrailer and $run_header_1->ntrailer == 0) {
    $run_header = $run_header_0;
  }
}

my $data_addr = $run_header->data_addr;

my $scan_index_addr = $run_header->scan_index_addr;
my $trailer_addr = $run_header->trailer_addr;
my $params_addr = $run_header->params_addr;

# InstID follows immediately
my $inst = Finnigan::InstID->decode(\*INPUT);

# ---------------------------------------------------------------------
# fast-forward to ScanIndex
seek INPUT, $scan_index_addr, 0;

my %scan_index;
# this code is not fool-proof and is not finished! It assumes that
# there are exactly as many entries in ScanIndex as would fit
# between $first_scan and $last_scan. In other words, the internal
# indices and links are not checked.
my $first_scan = $run_header->sample_info->first_scan;
my $last_scan = $run_header->sample_info->last_scan;

# get the first entry
my $entry = Finnigan::ScanIndexEntry->decode(\*INPUT, $VERSION);
my $size = $entry->size;
seek INPUT, $scan_index_addr, 0; # step back for simplicity; we just
                                 # need to know the record size at
                                 # this point, to be able to skip records
my $from = exists $args->{-r} ? $args->{-r}{"<from>"} : $first_scan;
my $to = exists $args->{-r} ? $args->{-r}{"<to>"} : $last_scan;
die "inverted range: [$from .. $to]" if $from > $to;

if ( $from > $first_scan) {
  # skip these entries
  seek INPUT, $scan_index_addr + ($from - $first_scan)*$size, 0;
}
foreach my $i ($from - 1 .. $to - 1) {
  $scan_index{$i} = Finnigan::ScanIndexEntry->decode(\*INPUT, $VERSION)->values;
}


# ---------------------------------------------------------------------
# Now go read the trailer. Because the trailer records are of variable
# size, they are not directly addressable and all of them must be
# read, up to the highest number in the range.
seek INPUT, $trailer_addr, 0;

# read the number of ScanEvent records in the file
my $rec;
my $bytes_to_read = 4;
my $nbytes = read INPUT, $rec, $bytes_to_read;
$nbytes == $bytes_to_read
  or die "could not read all $bytes_to_read bytes of the trailer scan events count at $trailer_addr";
my $trailer_length = unpack 'V', $rec;

my %scan_event;
my %ms_power;
foreach my $i ( 0 .. $trailer_length - 1) {
  my $n = $i + 1;
  my $e = Finnigan::ScanEvent->decode(\*INPUT, $VERSION)->purge_unused_data;
  next if $n < $from;
  if ($n == $from and $e->preamble->dependent) {
    say STDERR "Range error: cannot form valid mzXML starting with the dependent scan $n";
    exit -1;
  }

  $scan_event{$i} = $e;
  $ms_power{$e->preamble->ms_power}++;
  last if $n == $to;
}


# ---------------------------------------------------------------------
# Now read the ScanParameters stream. Its records have variable size
# and are not directly addressable, so all of them must be read, up to
# the highest number in the range.

# First, in order to reach the ScanParameters header, the error
# log and the scan hierarchy must be read.

# error log
my $error_log_addr = $run_header->error_log_addr;
seek INPUT, $error_log_addr, 0;

# read the number of ErrorLog records
my $error_log_length = Finnigan::Decoder->read(\*INPUT, ['length' => ['V', 'UInt32']])->{data}->{length}->{value};
foreach my $i ( 0 .. $error_log_length - 1) {
  my $e = Finnigan::Error->decode(\*INPUT);
  unless ( exists $args->{'-q'} ) {
    say STDERR "Error: (time = " . $e->time . "): " . $e->message;
  }
}

# Read the scan even hierarchy, even though it is not used -- just to
# reach the next object in the stream.  This is unlike uf-mzml, where
# the event template for each segment is used to write out controller
# type and number.
my $nsegs = Finnigan::Decoder->read(\*INPUT, ['nsegs' => ['V', 'UInt32']])->{data}->{nsegs}->{value};
foreach my $i ( 0 .. $nsegs - 1) {
  my $n = Finnigan::Decoder->read(\*INPUT, ['n' => ['V', 'UInt32']])->{data}->{n}->{value};
  foreach my $j ( 0 .. $n - 1) {
    Finnigan::ScanEventTemplate->decode(\*INPUT, $VERSION);
  }
}

# now the file pointer is at the start of GenericDataHeader for ScanParameters
my $params_header = Finnigan::GenericDataHeader->decode(\*INPUT);

# With the header on hand, skip to the ScanParameters stream and grab
# a few values for each scan (just the required ones, to reduce memory
# use).  MzML needs more per-scan parameters; we only need charge
# state here, but will still use the same storage as in uf-mzml, for
# uniformity.
seek INPUT, $params_addr, 0;

my $param;
foreach my $i ( $first_scan - 1 .. $last_scan - 1) {
  my $n = $i + 1;
  my $p = Finnigan::ScanParameters->decode(\*INPUT, $params_header->field_templates);
  next if $n < $from;
  my $charge = $p->charge_state;
  $param->{charge_state}->{$i} = $charge if $charge;
  last if $n == $to;
}


#------------------------------------------------------------------------------------------
# This is a reasonably good point to start generating the output. We
# know everything about the data, but haven't started reading the scan
# data itself

my $parent_scan_data; # for looking up the precursor ion for each of
                      # the dependent MS2 scans

my $x = XML::Generator->new(
                            pretty => 1,
                            # conformance => 'strict',
                            namespace => ['http://sashimi.sourceforge.net/schema_revision/mzXML_3.2'],
                           );


tie my %msRunAttr, 'Tie::IxHash';
%msRunAttr = (
              scanCount => $last_scan - $first_scan + 1,
              startTime => sprintf("PT%.4fS", 60 * $run_header->sample_info->start_time),
              endTime   => sprintf("PT%.4fS", 60 * $run_header->sample_info->end_time),
             );

tie my %parentFileAttrOrig, 'Tie::IxHash';
%parentFileAttrOrig = (
              fileName => decode_string($seq_row->file_name),
              fileType => 'RAWData',
              fileSha1 => $digest,
             );

tie my %parentFileAttr, 'Tie::IxHash';
%parentFileAttr = (
              fileName => "$path/$file",
              fileType => 'RAWData',
              fileSha1 => $digest,
             );

tie my %msManufacturerAttr, 'Tie::IxHash';
%msManufacturerAttr = (
              category => 'msManufacturer',
              value => 'Thermo Scientific', # although it does not come from the file
             );

tie my %msModelAttr, 'Tie::IxHash';
%msModelAttr = (
              category => 'msModel',
              value => decode_string($inst->model),
             );

tie my %msIonisationAttr, 'Tie::IxHash';
%msIonisationAttr = (
              category => 'msIonisation',
              value => $scan_event{$from - 1}->preamble->ionization(decode => 1), # not knowing better;
                                                 # it can probably be found in the method file
             );

tie my %msAnalyzerAttr, 'Tie::IxHash';
%msAnalyzerAttr = (
              category => 'msMassAnalyzer',
              value => $scan_event{$from - 1}->preamble->analyzer(decode => 1), # not knowing better;
                                                 # it can probably be found in the method file
             );

tie my %msDetectorAttr, 'Tie::IxHash';
%msDetectorAttr = (
              category => 'msDetector',
              value => $scan_event{$from - 1}->preamble->detector(decode => 1), # not knowing better;
                                                 # it can probably be found in the method file
             );

tie my %acqSoftwareAttr, 'Tie::IxHash';
%acqSoftwareAttr = (
                 type => 'acquisition',
                 name => 'Xcalibur',     # what else?
                 version => decode_string($inst->software_version),
                );

tie my %dataProcessingAttr, 'Tie::IxHash';
if ( exists $args->{-c} ) {
  $dataProcessingAttr{centroided}++;
}

tie my %convSoftwareAttr, 'Tie::IxHash';
%convSoftwareAttr = (
                     type => 'conversion',
                     name => 'unfinnigan',
                     version => $Finnigan::VERSION,
                    );

my $xml = $x->mzXML(
  ['http://sashimi.sourceforge.net/schema_revision/mzXML_3.2'],
  {
   'xmlns:xsi' => 'http://www.w3.org/2001/XMLSchema-instance',
   'xsi:schemaLocation' => 'http://sashimi.sourceforge.net/schema_revision/mzXML_3.2 http://sashimi.sourceforge.net/schema_revision/mzXML_3.2/mzXML_idx_3.2.xsd'
  },
  $x->msRun(\%msRunAttr,
    $x->parentFile(\%parentFileAttrOrig),
    $x->parentFile(\%parentFileAttr),
    $x->msInstrument(
      $x->msManufacturer(\%msManufacturerAttr),
      $x->msModel(\%msModelAttr),
      $x->msIonisation(\%msIonisationAttr),
      $x->msMassAnalyzer(\%msAnalyzerAttr),
      $x->msDetector(\%msDetectorAttr),
      $x->software(\%acqSoftwareAttr),
    ),
    $x->dataProcessing(
      \%dataProcessingAttr,
      $x->software(\%convSoftwareAttr),
    ),
    $x->cut('------------'),
  ),
  $x->index({name => 'scan'},
    $x->scanOffset
  ),
  $x->indexOffset('Index List Offset'),
  $x->sha1('fileChecksumValue')
);


# Split the file template into a head and a tail and write the head out.:w
my ($head, $tail) = split "<cut>------------</cut>\n", "$xml";

#my $decl = qq(<?xml version="1.0" encoding="UTF-8"?>\n);
my $decl = qq(<?xml version="1.0" encoding="ISO-8859-1"?>\n);
print $decl;
$sha1->add($decl);

# put each element on its own line
$head =~ s/\"\n\s+/" /sg;
$head =~ s/\n\s+$/\n/s;
print $head;
$sha1->add($head);

my %xml_scan_offset;

foreach ($from .. $to) {
  next if $scan_event{$_ - 1}->preamble->dependent;
  my $parentScanNumber = $_;

  # Creating a new generatator for each MS1 spectrum. Note that the namespace
  # attribute set in the file template generator is not used (matching the
  # output of proteowizard).
  $x = XML::Generator->new(pretty => 2);

  # say STDERR "in outer map ($parentScanNumber)";
  my ( $peaks, $attr ) = read_scan($parentScanNumber, $args, \%scan_index, \%scan_event);

  my $buf;
  foreach my $peak ( @$peaks ) {
    $buf .= pack("NN", unpack("VV", pack("ff", @$peak)));
  }

  tie my %peakAttr, 'Tie::IxHash';
  %peakAttr = (
    precision       => 32,
    byteOrder       => "network",
    contentType     => "m/z-int",
    compressionType => "none",
    compressedLen   => 0,
  );
  $xml = $x->scan(
    $attr,
    $x->peaks(\%peakAttr, $buf ? encode_base64($buf, "") : ''),
    #$x->peaks(\%peakAttr, ""),
    map {
      my $n = $_;
      my $isMS2 = ($scan_event{$n-1}->preamble->ms_power == 2);

      # say STDERR "  in inner map ($n)";
      my ( $peaks, $attr, $precursor_peak ) = read_scan($n, $args, \%scan_index, \%scan_event);

      my $buf;
      foreach my $peak ( @$peaks ) {
        $buf .= pack("NN", unpack("VV", pack("ff", @$peak)));
      }

      tie my %precursorAttr, 'Tie::IxHash';
      if ( $isMS2 ) {
        %precursorAttr = (
          precursorIntensity  => sprintf("%.2f",$precursor_peak->{intensity}),
          precursorCharge     => $param->{charge_state}->{$n-1},
          activationMethod    => uc $Finnigan::activationMethod,
        );
        delete $precursorAttr{precursorCharge} unless $param->{charge_state}->{$n-1};
      }

      if ( $isMS2 ) {
        $x->scan(
          $attr,
          $x->precursorMz(\%precursorAttr, $precursor_peak->{Mz}),
          $x->peaks(\%peakAttr, $buf ? encode_base64($buf, "") : ''),
          #$x->peaks(\%peakAttr, ""),
        )
      }
      else { # for MS1 scans like SIM or zoom scans
        $x->scan(
          $attr,
          $x->peaks(\%peakAttr, encode_base64($buf, "")),
        )
      }
    } dependent_scans(\%scan_event, $parentScanNumber)
  );

  # indent to match the parent element
  $xml =~ s/\n( +)/"\n" . (' ' x (2 + indent($1)))/seg;
  $xml =~ s%\n</scan>%\n  </scan>%s;
  $xml = "  $xml\n";

  # find all occurences of the scan start tag and take note of offests
  my $offset = 0;
  my $n = $parentScanNumber;
  my $token = '<scan num=';
  my $pos = index($xml, $token, $offset);

  my $file_offset = tell STDOUT;
  while ($pos != -1) {
    $file_offset += $pos;
    $xml_scan_offset{$n} = $file_offset;

    $offset = $pos + length($token) + 1;
    $pos = index($xml, $token, $offset);
    $n++;
  }

  $sha1->add($xml);
  print $xml;
} # for each parent scan

my $current_pos = tell STDOUT;
my $index_offset = $current_pos + index($tail, '<index ');

my $buf = '';
foreach my $i (sort { $a <=> $b } keys %xml_scan_offset ) {
  my $n = $i + 1;
  $buf .= qq(   <offset id="$n">$xml_scan_offset{$i}</offset>\n);
}

my $offsets = join "\n  ", map {
  qq(<offset id="$_">$xml_scan_offset{$_}</offset>)
} $from .. $to;

$tail =~ s{<scanOffset />}{$offsets};
$tail =~ s{Index List Offset}{$index_offset};

my ($tail_head, $tail_tail) = split 'fileChecksumValue', $tail;
$sha1->add($tail_head);
print $tail_head;

say $sha1->hexdigest . $tail_tail;

# ------------------------ end of main program --------------------------


sub min($$) { $_[$_[0] > $_[1]] }

sub decode_string {
  my $buf = shift;
  $buf =~ s/\x00//g;
  return $buf;
}

sub dependent_scans {
  my ($scan_event, $scan_no) = @_;
  my @list = ();
  return unless $scan_event->{$scan_no - 1};
  my $ms_power = $scan_event->{$scan_no - 1}->preamble->ms_power;
  return unless $ms_power == 1; # assume ms2 scans have no further dependents
  for ( my $i = $scan_no; 1; $i++ ) {
    last unless $scan_event{$i};
    last unless $scan_event->{$i}->preamble->dependent;
    push @list, $i + 1;
  }
  return @list;
}

sub read_scan {
  my ($n, $args, $scan_index, $scan_event) = @_;
  my $i = $n-1;

  seek INPUT, $data_addr + $scan_index->{$i}->{offset}, 0;

  my $scan = Finnigan::Scan->decode( \*INPUT );
  my $ph = $scan->header;
  my $profile;
  $profile = $scan->profile if $ph->profile_size;
  if ( $profile ) {
    $profile->set_converter($scan_event->{$i}->converter);
    $profile->set_inverse_converter($scan_event->{$i}->inverse_converter);
  }
  my $peaks = $scan->centroids if $ph->peak_list_size;
  my $peakList;
  my $ms_power = $scan_event->{$i}->preamble->ms_power;
  my $dependent = $scan_event->{$i}->preamble->dependent;
  if ( not $dependent ) {
    $parent_scan_data = $profile ? $profile : $peaks;
    $parent_scan_data->{type} = $profile ? 'profile' : 'centroid';
    $parent_scan_data->{"scan number"} = $n;
  }

  my $peakCount = 0;
  if ( exists $args->{-c} ) {
    if ($peaks) {
      $peakCount = $peaks->count;
      if ( $peakCount ) {
        $peakList = $peaks->list;
      }
    }
    elsif ( $profile ) {
      # if there are no called peaks, treat the profile as a set of peaks
      my $bins;
      if ( $profile->nchunks > 1) {
        # The full-featured Finnigan::Profile::bins() has an option for filling
        # the gaps between the peoks with zeroes.
        # $bins = $profile->bins($range, "add empty bins"); # this call implicitly uses the forward converter

        # The more light-weight Finnigan::Profile::bins() has instead an option
        # for adding the "bookends" -- short series of zero bins on either
        # side of the peak -- and it does not have the range option.
        $bins = $profile->bins($NBINS); # this call implicitly uses the forward converter
      }
      else { # the profile is stored as one huge set of bins
        $bins = $profile->bins; # this call implicitly uses the forward converter
      }
      $peakCount = scalar @$bins;
      say STDERR "profile ($peakCount) $scan_event->{$i} at $i";
      $peakList = $bins;
    }
    else {
      my $scan_no = $i + 1;
      $peakList = [];
    }
  }
  else {
    # simply read the profile and ignore the centroids
    if ( $profile ) {
      my $bins;
      if ( $profile->nchunks > 1) {
        # The full-featured Finnigan::Profile::bins() has an option for filling
        # the gaps between the peoks with zeroes.
        # $bins = $profile->bins($range, "add empty bins"); # this call implicitly uses the forward converter

        # The more light-weight Finnigan::Profile::bins() has instead an option
        # for adding the "bookends" -- short series of zero bins on either
        # side of the peak -- and it does not have the range option.
        $bins = $profile->bins($NBINS); # this call implicitly uses the forward converter
      }
      else {
        $bins = $profile->bins; # this call implicitly uses the forward converter
      }
      $peakCount = scalar @$bins;
      say STDERR "profile ($peakCount) $scan_event->{$i} at $i";
      $peakList = $bins;
    }
    else {
      say STDERR "No profile in scan $n? Try to extract centroids by adding the -c option";
      exit -1;
    }
  }

  my %polarity_symbol = (
    0 => "-",
    1 => "+",
    2 => "any",
  );

  tie my %scanAttr, 'Tie::IxHash';
  %scanAttr = (
    num           => $n,
    msLevel       => $ms_power,
    peaksCount    => $peakCount,
    polarity      => $polarity_symbol{$scan_event->{$i}->preamble->polarity},
    scanType      => $scan_event->{$i}->preamble->scan_type(decode => 1),
    filterLine    => "$scan_event->{$i}",
    retentionTime => sprintf("PT%.4fS", 60 * $scan_index->{$i}->{"start time"}),
    lowMz         => $scan_index->{$i}->{"low mz"},
    highMz        => $scan_index->{$i}->{"high mz"},
    basePeakMz    => $scan_index->{$i}->{"base mz"},
    basePeakIntensity => $scan_index->{$i}->{"base intensity"},
    totIonCurrent => $scan_index->{$i}->{"total current"},
  );
  if ( $ms_power == 2 ) {
    $scanAttr{collisionEnergy} = $scan_event{$i}->reaction->energy;
    my $prec_mz = $scan_event{$i}->reaction->precursor;
    my $intensity = 0;
    $parent_scan_data->{"dependent scan number"} = $n;
    $intensity = $parent_scan_data->find_peak_intensity($prec_mz);
    return (
      $peakList,
      \%scanAttr,
      {
        Mz => $prec_mz,
        intensity => $intensity
      }
    );
  }
  else {
    return ($peakList, \%scanAttr);
  }
}


sub indent {
  my $val = length(shift);
  my $newVal = $indent_table{$val};
  return $newVal ? $newVal : $val;
}


# Local Variables:
# indent-tabs-mode: nil
# tab-width: 2
# End:

__END__
=head1 NAME

uf-mzxml - convert a Finnigan raw file to mzXML

=head1 SYNOPSIS

uf-mzxml [options] <file>

 Options:

  -c[entroids]                     write peak centroids instead of scan profiles where possible
  -r[ange] <from> .. <to>          write only scans with numbers between <from> and <to>
  <file>                           input file

=head1 OPTIONS

=over 4

=item B<-help>

Prints a brief help message and exits.

=item B<-c[entroids]>

Prefer centroids to raw profiles.

B<Note:> presently, B<uf-mzxml> does not do its own centroiding. If a scan contains no centroid data, the profile is written out.

=item B<-r[ange] E<lt>from:0+nE<gt> .. E<lt>to:0+nE<gt>>

Selects a range of scans to process.

B<Note:> in order to form the nested structure of dependent scans required in B<mzXML>, the first scan in the selected range has be a full MS1 scan. Otherwise, the program will exit with the following message:

  C<Range error: cannot form valid mzXML starting with the dependent scan ###>

To determine the appropriate range of scans, list all scans in the file using B<uf-trailer>.

=item B<-q[uiet]>

Suppress the instrument error messages stored in the input file. Without this option, the error messages will be printed to STDERR.

=back

=head1 SEE ALSO

Finnigan::Scan
Finnigan::Profile
Finnigan::ProfileChunk
uf-trailer

=head1 EXAMPLE

 uf-mzxml -c -r 350 .. 352 20070522_NH_Orbi2_HelaEpo_05.RAW > test.xml

  (extract peak centroids from scans 350 through 352)

=cut
